from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import HTTPException

from . import models, schemas


# 操作数据库：添加文案
async def create_writing(db: AsyncSession, writing: schemas.WritingCreate):
    db_writing = models.Writing(
        prompt=writing.prompt,
        user_ip=writing.user_ip,
        creat_time=writing.creat_time,  # Set creation time here
        prompt_tokens=writing.prompt_tokens,  # Calculate tokens here
    )
    db.add(db_writing)
    print("* db record created")
    await db.commit()
    print("* db created record committed")
    # db.refresh : commonly used with fields that are automatically generated by the database
    # here, after committing db_writing to the database, some fields \
    # (like the primary key, if it's auto-incremented) will have new values that were generated by the database. \
    # db.refresh(db_writing) updates the db_writing object with these new values from the database.
    await db.refresh(db_writing)
    print("* db created record refreshed")
    return db_writing


async def get_writings_by_ip(db: AsyncSession, user_ip: int):
    result = await db.execute(
        select(models.Writing).filter(models.Writing.user_ip == user_ip)
    )
    return result.scalars().all()


async def update_writing(
    db: AsyncSession, writing_id: int, update_data: schemas.WritingUpdate
):
    result = await db.execute(
        select(models.Writing).filter(models.Writing.id == writing_id)
    )
    db_writing = result.scalar_one_or_none()

    if db_writing:
        # Update fields from update_data
        for field, value in update_data.model_dump(exclude_unset=True).items():
            setattr(db_writing, field, value)
        await db.commit()
        print("* db update committed")
        await db.refresh(db_writing)
        return db_writing
    else:
        raise HTTPException(status_code=404, detail="Writing not found")


# 操作数据库：删除文案
async def delete_writing(db: AsyncSession, id: int):
    writing = db.get(models.Writing, id)
    db.delete(writing)
    await db.commit()
    return {"ok": True}


# 更多session API
# 参考：https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session
